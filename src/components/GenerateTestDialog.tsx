import React, { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { showSuccess, showError } from '@/utils/toast';
import { Loader2 } from 'lucide-react';

interface Subject {
  id: string;
  name: string;
}

interface GenerateTestDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
  userId: string;
  selectedQuestions: string[];
  subjects: Subject[];
  isProOrHigher: boolean;
}

export const GenerateTestDialog = ({
  isOpen,
  onClose,
  onSuccess,
  userId,
  selectedQuestions,
  subjects,
  isProOrHigher,
}: GenerateTestDialogProps) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [testTitle, setTestTitle] = useState('');
  const [isAutoGenerated, setIsAutoGenerated] = useState(false);
  const [autoGenSubjectId, setAutoGenSubjectId] = useState('');
  const [autoGenQuantity, setAutoGenQuantity] = useState('5');
  const [autoGenDifficulty, setAutoGenDifficulty] = useState('medium');

  const handleGenerateTest = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!testTitle.trim()) {
      showError('O título da prova é obrigatório.');
      return;
    }

    setIsSubmitting(true);
    let questionsToUse: string[] = [];
    let title = testTitle.trim();

    if (isAutoGenerated) {
      if (!autoGenSubjectId || !autoGenQuantity) {
        showError('Selecione a matéria e a quantidade para geração automática.');
        setIsSubmitting(false);
        return;
      }

      // Fetch questions based on auto-generation criteria
      const { data: autoQuestions, error: autoError } = await supabase
        .from('questions')
        .select('id')
        .eq('subject_id', autoGenSubjectId)
        .eq('difficulty_level', autoGenDifficulty)
        .limit(parseInt(autoGenQuantity));

      if (autoError || !autoQuestions || autoQuestions.length === 0) {
        showError('Não foi possível gerar questões automaticamente com os critérios selecionados.');
        setIsSubmitting(false);
        return;
      }
      questionsToUse = autoQuestions.map(q => q.id);
      title = `Prova Automática: ${subjects.find(s => s.id === autoGenSubjectId)?.name || ''} - ${autoGenQuantity} Questões`;
    } else {
      if (selectedQuestions.length === 0) {
        showError('Selecione pelo menos uma questão ou ative a geração automática.');
        setIsSubmitting(false);
        return;
      }
      questionsToUse = selectedQuestions;
    }

    if (questionsToUse.length === 0) {
      showError('Nenhuma questão selecionada ou gerada para a prova.');
      setIsSubmitting(false);
      return;
    }

    const { data, error } = await supabase
      .from('user_tests')
      .insert({
        user_id: userId,
        title: title,
        is_auto_generated: isAutoGenerated,
        selected_question_ids: questionsToUse,
        status: 'pending',
      })
      .select('id')
      .single();

    if (error) {
      showError(`Erro ao gerar prova: ${error.message}`);
      console.error('Generate test error:', error);
    } else {
      showSuccess('Prova gerada com sucesso!');
      onSuccess();
      // Redirecionar para a prova recém-criada ou para a lista de provas
      // navigate(`/take-test/${data.id}`); // Isso pode ser feito no onSuccess do componente pai
    }
    setIsSubmitting(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>Gerar Nova Prova</DialogTitle>
          <DialogDescription>
            Crie uma prova personalizada com questões selecionadas ou deixe o sistema gerar automaticamente.
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleGenerateTest} className="space-y-4 py-4">
          <div className="space-y-2">
            <Label htmlFor="test-title">Título da Prova</Label>
            <Input
              id="test-title"
              value={testTitle}
              onChange={(e) => setTestTitle(e.target.value)}
              placeholder="Ex: Simulado ENEM Matemática"
              required
            />
          </div>

          {isProOrHigher && (
            <div className="flex items-center space-x-2">
              <Switch
                id="auto-generate"
                checked={isAutoGenerated}
                onCheckedChange={setIsAutoGenerated}
              />
              <Label htmlFor="auto-generate">Gerar Prova Automaticamente</Label>
            </div>
          )}

          {isAutoGenerated && isProOrHigher && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="auto-gen-subject">Matéria</Label>
                <Select value={autoGenSubjectId} onValueChange={setAutoGenSubjectId} required>
                  <SelectTrigger id="auto-gen-subject"><SelectValue placeholder="Selecione a matéria" /></SelectTrigger>
                  <SelectContent>
                    {subjects.map(subject => (
                      <SelectItem key={subject.id} value={subject.id}>{subject.name}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="auto-gen-quantity">Quantidade de Questões</Label>
                <Input
                  id="auto-gen-quantity"
                  type="number"
                  value={autoGenQuantity}
                  onChange={(e) => setAutoGenQuantity(e.target.value)}
                  min="1"
                  required
                />
              </div>
              <div className="space-y-2 md:col-span-2">
                <Label htmlFor="auto-gen-difficulty">Nível de Dificuldade</Label>
                <Select value={autoGenDifficulty} onValueChange={setAutoGenDifficulty} required>
                  <SelectTrigger id="auto-gen-difficulty"><SelectValue placeholder="Selecione o nível" /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="easy">Fácil</SelectItem>
                    <SelectItem value="medium">Médio</SelectItem>
                    <SelectItem value="hard">Difícil</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          )}

          <DialogFooter>
            <Button type="button" variant="outline" onClick={onClose}>Cancelar</Button>
            <Button type="submit" disabled={isSubmitting}>
              {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              Gerar Prova
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
};